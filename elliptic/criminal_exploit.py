from collections import namedtuple
from sage.all import *
from criminal_source import gen_shared_secret
from ecc4_decrypt import decrypt_flag



# Create a simple Point class to represent the affine points.
Point = namedtuple("Point", "x y")

# The point at infinity (origin for the group law).
O = 'Origin'

FLAG = b'crypto{??????????????????????????????}'


# Define the curve
p = 310717010502520989590157367261876774703
a = 2
b = 3

# Generator
g_x = 179210853392303317793440285562762725654
g_y = 105268671499942631758568591033409611165

public_x = 280810182131414898730378982766101210916
public_y = 291506490768054478159835604632710368904

iv = '07e2628b590095a5e332d397b8a59aa7'
encrypted_flag = '8220b7c47b36777a737f5ef9caa2814cf20c1c1ef496ec21a9b4833da24a008d0870d3ac3a6ad80065c138a2ed6136af'


# Bob's public key
b_x = 272640099140026426377756188075937988094
b_y = 51062462309521034358726608268084433317


E = EllipticCurve(GF(p), [a, b])
G = E(g_x, g_y)
A = E(public_x, public_y)
B = E(b_x, b_y)

print(f'{G = }')
print(f'{A = }')
print(f'{B = }')

nB = G.discrete_log(B)

print(f'{nB = }')

# Calculate Shared Secret
A_point = Point(int(A.xy()[0]), int(A.xy()[1]))
shared_secret = gen_shared_secret(A_point, nB)

# Send this to Bob!
flag = decrypt_flag(shared_secret, iv, encrypted_flag)
print(flag)
